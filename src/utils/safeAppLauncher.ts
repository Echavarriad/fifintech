import { Platform, Alert, AppState, Linking } from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { AndroidCrashHandler } from './androidCrashHandler';
import { AppInitializer } from './appInitializer';

/**
 * SafeAppLauncher - Lanzador seguro de la aplicaci√≥n
 * Implementa m√∫ltiples capas de seguridad para evitar crashes al iniciar
 */
export class SafeAppLauncher {
  private static isLaunching = false;
  private static launchAttempts = 0;
  private static maxLaunchAttempts = 3;
  private static safeMode = false;
  private static lastCrashTime: number | null = null;

  /**
   * Lanza la aplicaci√≥n de forma segura
   */
  static async launch(): Promise<boolean> {
    if (this.isLaunching) {
      console.log('üöÄ SafeAppLauncher: Ya se est√° lanzando la aplicaci√≥n');
      return false;
    }

    this.isLaunching = true;
    this.launchAttempts++;

    try {
      console.log(`üöÄ SafeAppLauncher: Intento de lanzamiento ${this.launchAttempts}/${this.maxLaunchAttempts}`);

      // 1. Verificar si hubo un crash reciente
      await this.checkRecentCrash();

      // 2. Verificar integridad del sistema
      const systemIntegrity = await this.checkSystemIntegrity();
      if (!systemIntegrity) {
        throw new Error('Integridad del sistema comprometida');
      }

      // 3. Inicializar en modo seguro si es necesario
      if (this.safeMode) {
        console.log('üõ°Ô∏è SafeAppLauncher: Iniciando en modo seguro');
        await this.initializeSafeMode();
      } else {
        // 4. Inicializaci√≥n normal
        await this.initializeNormalMode();
      }

      // 5. Verificar que la inicializaci√≥n fue exitosa
      const initSuccess = await this.verifyInitialization();
      if (!initSuccess) {
        throw new Error('Verificaci√≥n de inicializaci√≥n fall√≥');
      }

      // 6. Configurar monitoreo post-lanzamiento
      this.setupPostLaunchMonitoring();

      console.log('‚úÖ SafeAppLauncher: Aplicaci√≥n lanzada exitosamente');
      this.resetLaunchState();
      return true;

    } catch (error) {
      console.error(`‚ùå SafeAppLauncher: Error en intento ${this.launchAttempts}:`, error);
      return await this.handleLaunchFailure(error);
    } finally {
      this.isLaunching = false;
    }
  }

  /**
   * Verifica si hubo un crash reciente
   */
  private static async checkRecentCrash(): Promise<void> {
    try {
      if (Platform.OS === 'android') {
        const lastCrash = await AndroidCrashHandler.getLastCrashInfo();
        if (lastCrash) {
          const crashTime = new Date(lastCrash.timestamp).getTime();
          const now = Date.now();
          const timeDiff = now - crashTime;

          // Si el crash fue hace menos de 5 minutos, activar modo seguro
          if (timeDiff < 5 * 60 * 1000) {
            console.warn('‚ö†Ô∏è SafeAppLauncher: Crash reciente detectado, activando modo seguro');
            this.safeMode = true;
            this.lastCrashTime = crashTime;
          }
        }
      }
    } catch (error) {
      console.error('‚ùå Error verificando crash reciente:', error);
    }
  }

  /**
   * Verifica la integridad del sistema
   */
  private static async checkSystemIntegrity(): Promise<boolean> {
    try {
      console.log('üîç SafeAppLauncher: Verificando integridad del sistema...');

      // 1. Verificar AsyncStorage
      try {
        const testKey = '@SafeAppLauncher:integrity_test';
        await AsyncStorage.setItem(testKey, 'test');
        const value = await AsyncStorage.getItem(testKey);
        await AsyncStorage.removeItem(testKey);
        
        if (value !== 'test') {
          console.error('‚ùå AsyncStorage no funciona correctamente');
          return false;
        }
      } catch (error) {
        console.error('‚ùå Error en AsyncStorage:', error);
        return false;
      }

      // 2. Verificar memoria disponible
      if (global.performance && global.performance.memory) {
        const memInfo = global.performance.memory;
        const memoryUsage = memInfo.usedJSHeapSize / memInfo.totalJSHeapSize;
        
        if (memoryUsage > 0.9) {
          console.warn('‚ö†Ô∏è Uso de memoria muy alto:', memoryUsage);
          // Activar modo seguro si la memoria est√° muy alta
          this.safeMode = true;
        }
      }

      // 3. Verificar estado de la aplicaci√≥n
      const appState = AppState.currentState;
      if (appState !== 'active') {
        console.warn('‚ö†Ô∏è App no est√° en estado activo:', appState);
      }

      console.log('‚úÖ Integridad del sistema verificada');
      return true;
    } catch (error) {
      console.error('‚ùå Error verificando integridad:', error);
      return false;
    }
  }

  /**
   * Inicializa la aplicaci√≥n en modo seguro
   */
  private static async initializeSafeMode(): Promise<void> {
    try {
      console.log('üõ°Ô∏è SafeAppLauncher: Inicializando en modo seguro...');

      // 1. Limpiar datos corruptos
      await this.cleanCorruptedData();

      // 2. Inicializar solo componentes esenciales
      if (Platform.OS === 'android') {
        await AndroidCrashHandler.initialize();
      }

      // 3. Configurar manejo de errores b√°sico
      this.setupBasicErrorHandling();

      // 4. Verificar permisos m√≠nimos
      await this.checkMinimalPermissions();

      console.log('‚úÖ Modo seguro inicializado');
    } catch (error) {
      console.error('‚ùå Error en modo seguro:', error);
      throw error;
    }
  }

  /**
   * Inicializa la aplicaci√≥n en modo normal
   */
  private static async initializeNormalMode(): Promise<void> {
    try {
      console.log('üöÄ SafeAppLauncher: Inicializando en modo normal...');

      // Usar el AppInitializer completo
      const initSuccess = await AppInitializer.initialize();
      if (!initSuccess) {
        throw new Error('AppInitializer fall√≥');
      }

      console.log('‚úÖ Modo normal inicializado');
    } catch (error) {
      console.error('‚ùå Error en modo normal:', error);
      throw error;
    }
  }

  /**
   * Limpia datos corruptos
   */
  private static async cleanCorruptedData(): Promise<void> {
    try {
      console.log('üßπ SafeAppLauncher: Limpiando datos corruptos...');

      const corruptedKeys = [
        '@FiFintech:corrupted',
        '@FiFintech:temp',
        '@FiFintech:cache',
        '@FiFintech:error_state',
        '@SafeAppLauncher:integrity_test'
      ];

      for (const key of corruptedKeys) {
        try {
          await AsyncStorage.removeItem(key);
        } catch (error) {
          console.log(`üì± No se pudo limpiar ${key}:`, error);
        }
      }

      console.log('‚úÖ Datos corruptos limpiados');
    } catch (error) {
      console.error('‚ùå Error limpiando datos:', error);
    }
  }

  /**
   * Configura manejo b√°sico de errores
   */
  private static setupBasicErrorHandling(): void {
    try {
      const originalHandler = ErrorUtils.getGlobalHandler();
      
      ErrorUtils.setGlobalHandler((error, isFatal) => {
        console.error('üö® Error en modo seguro:', error);
        
        // En modo seguro, intentar recuperaci√≥n inmediata
        if (!isFatal) {
          this.attemptImmediateRecovery();
        }

        if (originalHandler) {
          originalHandler(error, isFatal);
        }
      });

      console.log('‚úÖ Manejo b√°sico de errores configurado');
    } catch (error) {
      console.error('‚ùå Error configurando manejo b√°sico:', error);
    }
  }

  /**
   * Verifica permisos m√≠nimos
   */
  private static async checkMinimalPermissions(): Promise<void> {
    try {
      console.log('üîê SafeAppLauncher: Verificando permisos m√≠nimos...');
      
      // Verificar solo permisos cr√≠ticos para el funcionamiento b√°sico
      // En modo seguro, no requerimos todos los permisos
      
      console.log('‚úÖ Permisos m√≠nimos verificados');
    } catch (error) {
      console.error('‚ùå Error verificando permisos:', error);
    }
  }

  /**
   * Verifica que la inicializaci√≥n fue exitosa
   */
  private static async verifyInitialization(): Promise<boolean> {
    try {
      console.log('üîç SafeAppLauncher: Verificando inicializaci√≥n...');

      // 1. Verificar que AsyncStorage funciona
      const testKey = '@SafeAppLauncher:init_test';
      await AsyncStorage.setItem(testKey, Date.now().toString());
      const value = await AsyncStorage.getItem(testKey);
      await AsyncStorage.removeItem(testKey);
      
      if (!value) {
        console.error('‚ùå AsyncStorage no funciona despu√©s de la inicializaci√≥n');
        return false;
      }

      // 2. Verificar que no hay errores pendientes
      // Aqu√≠ podr√≠as agregar m√°s verificaciones espec√≠ficas

      console.log('‚úÖ Inicializaci√≥n verificada');
      return true;
    } catch (error) {
      console.error('‚ùå Error verificando inicializaci√≥n:', error);
      return false;
    }
  }

  /**
   * Configura monitoreo post-lanzamiento
   */
  private static setupPostLaunchMonitoring(): void {
    try {
      // Monitorear cambios de estado de la app
      AppState.addEventListener('change', (nextAppState) => {
        if (nextAppState === 'background') {
          this.handleAppBackground();
        } else if (nextAppState === 'active') {
          this.handleAppForeground();
        }
      });

      console.log('‚úÖ Monitoreo post-lanzamiento configurado');
    } catch (error) {
      console.error('‚ùå Error configurando monitoreo:', error);
    }
  }

  /**
   * Maneja fallos de lanzamiento
   */
  private static async handleLaunchFailure(error: any): Promise<boolean> {
    try {
      console.error(`‚ùå SafeAppLauncher: Fallo en intento ${this.launchAttempts}:`, error);

      // Si hemos agotado los intentos
      if (this.launchAttempts >= this.maxLaunchAttempts) {
        console.error('‚ùå SafeAppLauncher: M√°ximo de intentos alcanzado');
        await this.showCriticalErrorDialog();
        return false;
      }

      // Activar modo seguro para el siguiente intento
      this.safeMode = true;

      // Esperar un poco antes del siguiente intento
      await new Promise(resolve => setTimeout(resolve, 2000));

      // Intentar de nuevo
      return await this.launch();
    } catch (retryError) {
      console.error('‚ùå Error en reintento:', retryError);
      return false;
    }
  }

  /**
   * Intenta recuperaci√≥n inmediata
   */
  private static attemptImmediateRecovery(): void {
    try {
      console.log('üîÑ SafeAppLauncher: Intentando recuperaci√≥n inmediata...');
      
      // Limpiar memoria si es posible
      if (global.gc) {
        global.gc();
      }

      console.log('‚úÖ Recuperaci√≥n inmediata completada');
    } catch (error) {
      console.error('‚ùå Error en recuperaci√≥n inmediata:', error);
    }
  }

  /**
   * Maneja cuando la app va al background
   */
  private static handleAppBackground(): void {
    try {
      console.log('üì± SafeAppLauncher: App en background');
      // Guardar estado cr√≠tico si es necesario
    } catch (error) {
      console.error('‚ùå Error manejando background:', error);
    }
  }

  /**
   * Maneja cuando la app vuelve al foreground
   */
  private static handleAppForeground(): void {
    try {
      console.log('üì± SafeAppLauncher: App en foreground');
      // Verificar integridad despu√©s de volver del background
    } catch (error) {
      console.error('‚ùå Error manejando foreground:', error);
    }
  }

  /**
   * Muestra di√°logo de error cr√≠tico
   */
  private static async showCriticalErrorDialog(): Promise<void> {
    try {
      Alert.alert(
        'Error Cr√≠tico',
        'La aplicaci√≥n no puede iniciarse correctamente. ¬øDesea intentar reiniciar en modo seguro?',
        [
          {
            text: 'Salir',
            style: 'cancel',
            onPress: () => {
              // En React Native no podemos cerrar la app directamente
              console.log('Usuario eligi√≥ salir');
            }
          },
          {
            text: 'Modo Seguro',
            onPress: async () => {
              this.resetLaunchState();
              this.safeMode = true;
              await this.launch();
            }
          },
          {
            text: 'Reintentar',
            onPress: async () => {
              this.resetLaunchState();
              await this.launch();
            }
          }
        ]
      );
    } catch (error) {
      console.error('‚ùå Error mostrando di√°logo:', error);
    }
  }

  /**
   * Reinicia el estado de lanzamiento
   */
  private static resetLaunchState(): void {
    this.isLaunching = false;
    this.launchAttempts = 0;
    this.safeMode = false;
  }

  /**
   * Verifica si est√° en modo seguro
   */
  static isSafeMode(): boolean {
    return this.safeMode;
  }

  /**
   * Fuerza modo seguro
   */
  static forceSafeMode(): void {
    this.safeMode = true;
  }

  /**
   * Obtiene informaci√≥n del estado actual
   */
  static getStatus(): any {
    return {
      isLaunching: this.isLaunching,
      launchAttempts: this.launchAttempts,
      safeMode: this.safeMode,
      lastCrashTime: this.lastCrashTime
    };
  }
}